% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/TASS.R
\name{TASS}
\alias{TASS}
\title{Class wrapping the 64TASS assembler for easier testing of the R64 assembler}
\description{
Class wrapping the 64TASS assembler for easier testing of the R64 assembler

Class wrapping the 64TASS assembler for easier testing of the R64 assembler
}
\details{
Set `option(TASS_BIN=...)` and `option(X64_BIN=...)` to set the assembler
and emulator executable locations, or pass in as arguments
`TASS$new(tass_bin=..., x64_bin=...)`
}
\examples{
\dontrun{
tass <- TASS$new("./asm/border.asm", tass_bin = "~/bin/64tass", x64_bin = "~/bin/x64")
tass$dump_asm()
tass$compile()
tass$get_prg()
tass$get_asm()
tass$compile_and_run()
}

}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{asm}}{the assembly code (as text)}

\item{\code{tass_bin}}{location of TASS executable}

\item{\code{prg}}{c64 PRG file with compiled 6502 machine code}

\item{\code{debug}}{text output during compilation
Initialise TASS}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-TASS-new}{\code{TASS$new()}}
\item \href{#method-TASS-compile}{\code{TASS$compile()}}
\item \href{#method-TASS-get_asm}{\code{TASS$get_asm()}}
\item \href{#method-TASS-get_prg}{\code{TASS$get_prg()}}
\item \href{#method-TASS-get_debug}{\code{TASS$get_debug()}}
\item \href{#method-TASS-clone}{\code{TASS$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TASS-new"></a>}}
\if{latex}{\out{\hypertarget{method-TASS-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TASS$new(
  asm = NULL,
  tass_bin = getOption("TASS_BIN", "/opt/homebrew/bin/64tass")
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{asm}}{the assembly code (as text)}

\item{\code{tass_bin}}{location of TASS executable
Compile asm with 64TASS

Note: Full TASS debugging output from the compilation step is kept
in the variable \code{debug}.  Use \code{tass$get_debug()} to access}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TASS-compile"></a>}}
\if{latex}{\out{\hypertarget{method-TASS-compile}{}}}
\subsection{Method \code{compile()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TASS$compile(verbosity = 1)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{verbosity}}{verboseness when compiling. 0 = no output, 
1 = messages from TASS compilation, 2 = all output from TASS}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TASS-get_asm"></a>}}
\if{latex}{\out{\hypertarget{method-TASS-get_asm}{}}}
\subsection{Method \code{get_asm()}}{
Get the ASM text
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TASS$get_asm()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TASS-get_prg"></a>}}
\if{latex}{\out{\hypertarget{method-TASS-get_prg}{}}}
\subsection{Method \code{get_prg()}}{
Get the compiled code as a raw vector
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TASS$get_prg()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TASS-get_debug"></a>}}
\if{latex}{\out{\hypertarget{method-TASS-get_debug}{}}}
\subsection{Method \code{get_debug()}}{
Get the TASS debugging output from compilation
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TASS$get_debug()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TASS-clone"></a>}}
\if{latex}{\out{\hypertarget{method-TASS-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TASS$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
